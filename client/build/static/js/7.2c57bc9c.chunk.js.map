{"version":3,"sources":["../node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.browser.esm.js","../node_modules/use-latest/dist/use-latest.esm.js","../node_modules/use-composed-ref/dist/use-composed-ref.esm.js","../node_modules/react-textarea-autosize/dist/react-textarea-autosize.browser.esm.js","components/myShopping.js"],"names":["index","useLayoutEffect","useLatest","value","ref","useRef","useIsomorphicLayoutEffect","current","updateRef","useComposedRef","libRef","userRef","prevUserRef","useCallback","instance","HIDDEN_TEXTAREA_STYLE","height","visibility","overflow","position","top","right","forceHiddenStyles","node","Object","keys","forEach","key","style","setProperty","hiddenTextarea","noop","SIZING_STYLE","isIE","document","documentElement","currentStyle","TextareaAutosize","_ref","cacheMeasurements","maxRows","minRows","_ref$onChange","onChange","_ref$onHeightChange","onHeightChange","props","_objectWithoutPropertiesLoose","isControlled","undefined","heightRef","measurementsCacheRef","resizeTextarea","nodeSizingData","window","getComputedStyle","obj","sizingStyle","reduce","acc","prop","boxSizing","width","parseFloat","borderRightWidth","borderLeftWidth","paddingRight","paddingLeft","paddingSize","paddingBottom","paddingTop","borderSize","borderBottomWidth","borderTopWidth","getSizingData","_calculateNodeHeight","sizingData","Infinity","createElement","setAttribute","parentNode","body","appendChild","_key","scrollHeight","getHeight","rowHeight","minHeight","Math","max","maxHeight","min","calculateNodeHeight","placeholder","listener","latestListener","handler","event","addEventListener","removeEventListener","useWindowResizeListener","_extends","forwardRef","MilestoneForm","lazy","then","mod","default","Orders","status","onClick","useContext","SiteContext","cart","userType","useState","total","setTotal","page","setPage","perPage","type","search","dateRange","column","order","sort","orders","setOrders","selectAll","setSelectAll","batch","setBatch","msg","setMsg","carts","setCarts","useEffect","startDate","moment","time","format","endDate","Date","setHours","fetch","URLSearchParams","user","q","dateFrom","dateTo","res","json","data","code","catch","err","console","log","method","headers","JSON","stringify","length","to","className","map","SingleOrder","_id","includes","OrderDraft","seller","btns","currentPage","open","actionsRef","setOrder","checkRef","history","useHistory","products","a","c","calculatePrice","product","gst","qty","fix","shopInfo","shippingCost","e","nativeEvent","path","push","icon","selected","setSelected","cancelOrder","prev","item","requestCancellation","filter","createdAt","location","pathname","Confirm","label","question","callback","FullOrder","match","milestoneForm","setMilestoneForm","refundTill","setRefundTill","issueRefund","setIssueRefund","params","refundable","days","getTime","productPrice","couponCodeDiscount","coupon","amount","maxDiscount","fee","replace","deliveredAt","entries","deliveryDetail","i","deliveryTime","src","images","name","cellSpacing","cellPadding","milestones","milestone","dscr","files","links","terms","head","setOpen","action","definedAmount","client","onSuccess","RefundForm","refund","loading","setLoading","issue","setIssue","setDscr","setFiles","submit","preventDefault","UploadFiles","fileLinks","onSubmit","required","target","accept","multiple","Disputes","disputes","setDisputes","dispute","SingleDispute","plaintiff","FullDispute","setData","role","Case","winner","defendant","case","firstName","lastName","message","profileImg","phone","balance","MyShopping","setCategories","categories","display","component"],"mappings":"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","file":"static/js/7.2c57bc9c.chunk.js","sourcesContent":["import { useLayoutEffect } from 'react';\n\nvar index =  useLayoutEffect ;\n\nexport default index;\n","import { useRef } from 'react';\nimport useIsomorphicLayoutEffect from 'use-isomorphic-layout-effect';\n\nvar useLatest = function useLatest(value) {\n  var ref = useRef(value);\n  useIsomorphicLayoutEffect(function () {\n    ref.current = value;\n  });\n  return ref;\n};\n\nexport default useLatest;\n","import { useRef, useCallback } from 'react';\n\nvar updateRef = function updateRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n    return;\n  }\n  ref.current = value;\n};\n\nvar useComposedRef = function useComposedRef(libRef, userRef) {\n  var prevUserRef = useRef();\n  return useCallback(function (instance) {\n    libRef.current = instance;\n\n    if (prevUserRef.current) {\n      updateRef(prevUserRef.current, null);\n    }\n\n    prevUserRef.current = userRef;\n\n    if (!userRef) {\n      return;\n    }\n\n    updateRef(userRef, instance);\n  }, [userRef]);\n};\n\nexport default useComposedRef;\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { useLayoutEffect, forwardRef, useRef, createElement } from 'react';\nimport useLatest from 'use-latest';\nimport useComposedRef from 'use-composed-ref';\n\nvar HIDDEN_TEXTAREA_STYLE = {\n  'min-height': '0',\n  'max-height': 'none',\n  height: '0',\n  visibility: 'hidden',\n  overflow: 'hidden',\n  position: 'absolute',\n  'z-index': '-1000',\n  top: '0',\n  right: '0'\n};\n\nvar forceHiddenStyles = function forceHiddenStyles(node) {\n  Object.keys(HIDDEN_TEXTAREA_STYLE).forEach(function (key) {\n    node.style.setProperty(key, HIDDEN_TEXTAREA_STYLE[key], 'important');\n  });\n};\n\n//   export type CalculatedNodeHeights = [height: number, rowHeight: number];\n// https://github.com/microsoft/TypeScript/issues/28259\n\nvar hiddenTextarea = null;\n\nvar getHeight = function getHeight(node, sizingData) {\n  var height = node.scrollHeight;\n\n  if (sizingData.sizingStyle.boxSizing === 'border-box') {\n    // border-box: add border, since height = content + padding + border\n    return height + sizingData.borderSize;\n  } // remove padding, since height = content\n\n\n  return height - sizingData.paddingSize;\n};\n\nfunction calculateNodeHeight(sizingData, value, minRows, maxRows) {\n  if (minRows === void 0) {\n    minRows = 1;\n  }\n\n  if (maxRows === void 0) {\n    maxRows = Infinity;\n  }\n\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea');\n    hiddenTextarea.setAttribute('tabindex', '-1');\n    hiddenTextarea.setAttribute('aria-hidden', 'true');\n    forceHiddenStyles(hiddenTextarea);\n  }\n\n  if (hiddenTextarea.parentNode === null) {\n    document.body.appendChild(hiddenTextarea);\n  }\n\n  var paddingSize = sizingData.paddingSize,\n      borderSize = sizingData.borderSize,\n      sizingStyle = sizingData.sizingStyle;\n  var boxSizing = sizingStyle.boxSizing;\n  Object.keys(sizingStyle).forEach(function (_key) {\n    var key = _key;\n    hiddenTextarea.style[key] = sizingStyle[key];\n  });\n  forceHiddenStyles(hiddenTextarea);\n  hiddenTextarea.value = value;\n  var height = getHeight(hiddenTextarea, sizingData); // measure height of a textarea with a single row\n\n  hiddenTextarea.value = 'x';\n  var rowHeight = hiddenTextarea.scrollHeight - paddingSize;\n  var minHeight = rowHeight * minRows;\n\n  if (boxSizing === 'border-box') {\n    minHeight = minHeight + paddingSize + borderSize;\n  }\n\n  height = Math.max(minHeight, height);\n  var maxHeight = rowHeight * maxRows;\n\n  if (boxSizing === 'border-box') {\n    maxHeight = maxHeight + paddingSize + borderSize;\n  }\n\n  height = Math.min(maxHeight, height);\n  return [height, rowHeight];\n}\n\nvar noop = function noop() {};\nvar pick = function pick(props, obj) {\n  return props.reduce(function (acc, prop) {\n    acc[prop] = obj[prop];\n    return acc;\n  }, {});\n};\n\nvar SIZING_STYLE = ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'boxSizing', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'lineHeight', 'paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop', // non-standard\n'tabSize', 'textIndent', // non-standard\n'textRendering', 'textTransform', 'width', 'wordBreak'];\nvar isIE = !!document.documentElement.currentStyle ;\n\nvar getSizingData = function getSizingData(node) {\n  var style = window.getComputedStyle(node);\n\n  if (style === null) {\n    return null;\n  }\n\n  var sizingStyle = pick(SIZING_STYLE, style);\n  var boxSizing = sizingStyle.boxSizing; // probably node is detached from DOM, can't read computed dimensions\n\n  if (boxSizing === '') {\n    return null;\n  } // IE (Edge has already correct behaviour) returns content width as computed width\n  // so we need to add manually padding and border widths\n\n\n  if (isIE && boxSizing === 'border-box') {\n    sizingStyle.width = parseFloat(sizingStyle.width) + parseFloat(sizingStyle.borderRightWidth) + parseFloat(sizingStyle.borderLeftWidth) + parseFloat(sizingStyle.paddingRight) + parseFloat(sizingStyle.paddingLeft) + 'px';\n  }\n\n  var paddingSize = parseFloat(sizingStyle.paddingBottom) + parseFloat(sizingStyle.paddingTop);\n  var borderSize = parseFloat(sizingStyle.borderBottomWidth) + parseFloat(sizingStyle.borderTopWidth);\n  return {\n    sizingStyle: sizingStyle,\n    paddingSize: paddingSize,\n    borderSize: borderSize\n  };\n};\n\nvar useWindowResizeListener = function useWindowResizeListener(listener) {\n  var latestListener = useLatest(listener);\n  useLayoutEffect(function () {\n    var handler = function handler(event) {\n      latestListener.current(event);\n    };\n\n    window.addEventListener('resize', handler);\n    return function () {\n      window.removeEventListener('resize', handler);\n    };\n  }, []);\n};\n\nvar TextareaAutosize = function TextareaAutosize(_ref, userRef) {\n  var cacheMeasurements = _ref.cacheMeasurements,\n      maxRows = _ref.maxRows,\n      minRows = _ref.minRows,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,\n      _ref$onHeightChange = _ref.onHeightChange,\n      onHeightChange = _ref$onHeightChange === void 0 ? noop : _ref$onHeightChange,\n      props = _objectWithoutPropertiesLoose(_ref, [\"cacheMeasurements\", \"maxRows\", \"minRows\", \"onChange\", \"onHeightChange\"]);\n\n  if (process.env.NODE_ENV !== 'production' && props.style) {\n    if ('maxHeight' in props.style) {\n      throw new Error('Using `style.maxHeight` for <TextareaAutosize/> is not supported. Please use `maxRows`.');\n    }\n\n    if ('minHeight' in props.style) {\n      throw new Error('Using `style.minHeight` for <TextareaAutosize/> is not supported. Please use `minRows`.');\n    }\n  }\n\n  var isControlled = props.value !== undefined;\n  var libRef = useRef(null);\n  var ref = useComposedRef(libRef, userRef);\n  var heightRef = useRef(0);\n  var measurementsCacheRef = useRef();\n\n  var resizeTextarea = function resizeTextarea() {\n    var node = libRef.current;\n    var nodeSizingData = cacheMeasurements && measurementsCacheRef.current ? measurementsCacheRef.current : getSizingData(node);\n\n    if (!nodeSizingData) {\n      return;\n    }\n\n    measurementsCacheRef.current = nodeSizingData;\n\n    var _calculateNodeHeight = calculateNodeHeight(nodeSizingData, node.value || node.placeholder || 'x', minRows, maxRows),\n        height = _calculateNodeHeight[0],\n        rowHeight = _calculateNodeHeight[1];\n\n    if (heightRef.current !== height) {\n      heightRef.current = height;\n      node.style.setProperty('height', height + \"px\", 'important');\n      onHeightChange(height, {\n        rowHeight: rowHeight\n      });\n    }\n  };\n\n  var handleChange = function handleChange(event) {\n    if (!isControlled) {\n      resizeTextarea();\n    }\n\n    onChange(event);\n  };\n\n  {\n    useLayoutEffect(resizeTextarea);\n    useWindowResizeListener(resizeTextarea);\n  }\n\n  return /*#__PURE__*/createElement(\"textarea\", _extends({}, props, {\n    onChange: handleChange,\n    ref: ref\n  }));\n};\n\nvar index = /* #__PURE__ */forwardRef(TextareaAutosize);\n\nexport default index;\n","import {\n  useState,\n  useEffect,\n  useRef,\n  useLayoutEffect,\n  useContext,\n  lazy,\n} from \"react\";\nimport {\n  Succ_svg,\n  Err_svg,\n  Plus_svg,\n  X_svg,\n  Combobox,\n  Pagination,\n  Checkbox,\n  calculateDiscount,\n  calculatePrice,\n  Actions,\n  Chev_down_svg,\n  Tabs,\n  Arrow_left_svg,\n  Media,\n  User,\n  FileInput,\n  UploadFiles,\n  Img,\n  Moment,\n  moment,\n  InputDateRange,\n} from \"./Elements\";\nimport { Link, Route, useHistory, Switch, Redirect } from \"react-router-dom\";\nimport { SiteContext } from \"../SiteContext\";\nimport { Modal, Confirm } from \"./Modal\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { toast } from \"react-toastify\";\nconst MilestoneForm = lazy(() =>\n  import(\"./Forms\").then((mod) => ({ default: mod.MilestoneForm }))\n);\n\nexport const Orders = ({ status, onClick }) => {\n  const { cart, userType } = useContext(SiteContext);\n  const [total, setTotal] = useState(0);\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(20);\n  const [type, setType] = useState(\"\");\n  const [search, setSearch] = useState(\"\");\n  const [dateRange, setDateRange] = useState(null);\n  const [sort, setSort] = useState({\n    column: \"createdAt\",\n    order: \"dsc\",\n  });\n  const [orders, setOrders] = useState([]);\n  const [selectAll, setSelectAll] = useState(false);\n  const [batch, setBatch] = useState([]);\n  const [msg, setMsg] = useState(null);\n  const [carts, setCarts] = useState([]);\n  useEffect(() => {\n    const startDate = moment({\n      time: dateRange?.startDate,\n      format: \"YYYY-MM-DD\",\n    });\n    const endDate = moment({\n      time: new Date(dateRange?.endDate)?.setHours(24, 0, 0, 0),\n      format: \"YYYY-MM-DD\",\n    });\n    fetch(\n      `/api/getOrders?${new URLSearchParams({\n        user: \"buyer\",\n        ...(search && { q: search }),\n        page,\n        perPage,\n        sort: sort.column,\n        order: sort.order,\n        ...(dateRange && {\n          dateFrom: startDate,\n          dateTo: endDate,\n        }),\n        ...(type && { type }),\n        ...(status && { status }),\n      })}`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.code === \"ok\") {\n          setOrders(data.orders);\n          setTotal(data.total);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setMsg(\n          <>\n            <button onClick={() => setMsg(null)}>Okay</button>\n            <div>\n              <Err_svg />\n              <h4>Could not get orders.</h4>\n            </div>\n          </>\n        );\n      });\n  }, [type, search, page, perPage, dateRange, status]);\n  useEffect(() => {\n    fetch(\"/api/getCartDetail\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ cart }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.code === \"ok\") {\n          setCarts(data.carts);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setMsg(\n          <>\n            <button onClick={() => setMsg(null)}>Okay</button>\n            <div>\n              <Err_svg />\n              <h4>Could not get cart detail. Make sure you're online.</h4>\n            </div>\n          </>\n        );\n      });\n  }, [cart]);\n  useEffect(() => {\n    if (selectAll) {\n    } else {\n      setBatch([]);\n    }\n  }, [selectAll]);\n  useEffect(() => {\n    if (batch.length === 0) {\n      setSelectAll(false);\n    }\n  }, [batch]);\n  return (\n    <>\n      {userType === \"seller\" && <Redirect to=\"/account/myShop/orders\" />}\n      <div className=\"productContainer\">\n        {\n          <div className=\"benner\">\n            <p>My Orders</p>\n          </div>\n        }\n        {\n          //   <div className=\"filters\">\n          //   <section>\n          //     <label>Total:</label>\n          //     {total}\n          //   </section>\n          //   <section>\n          //     <label>Per Page:</label>\n          //     <Combobox\n          //       defaultValue={0}\n          //       options={[\n          //         { label: \"20\", value: 20 },\n          //         { label: \"30\", value: 30 },\n          //         { label: \"50\", value: 50 },\n          //       ]}\n          //       onChange={(e) => setPerPage(e.value)}\n          //     />\n          //   </section>\n          //   <section className=\"search\">\n          //     <svg\n          //       xmlns=\"http://www.w3.org/2000/svg\"\n          //       width=\"23\"\n          //       height=\"23\"\n          //       viewBox=\"0 0 23 23\"\n          //     >\n          //       <path\n          //         id=\"Icon_ionic-ios-search\"\n          //         data-name=\"Icon ionic-ios-search\"\n          //         d=\"M27.23,25.828l-6.4-6.455a9.116,9.116,0,1,0-1.384,1.4L25.8,27.188a.985.985,0,0,0,1.39.036A.99.99,0,0,0,27.23,25.828ZM13.67,20.852a7.2,7.2,0,1,1,5.091-2.108A7.155,7.155,0,0,1,13.67,20.852Z\"\n          //         transform=\"translate(-4.5 -4.493)\"\n          //         fill=\"#707070\"\n          //         opacity=\"0.74\"\n          //       />\n          //     </svg>\n          //     <input\n          //       value={search}\n          //       onChange={(e) => setSearch(e.target.value)}\n          //       placeholder=\"Search for Seller\"\n          //     />\n          //     {search && (\n          //       <button onClick={() => setSearch(\"\")}>\n          //         <X_svg />\n          //       </button>\n          //     )}\n          //   </section>\n          //   <section className=\"category\">\n          //     <label>Type:</label>\n          //     <Combobox\n          //       defaultValue={0}\n          //       options={[\n          //         { label: \"All\", value: \"\" },\n          //         { label: \"Product\", value: \"product\" },\n          //         { label: \"Service\", value: \"service\" },\n          //         { label: \"Other\", value: \"other\" },\n          //       ]}\n          //       onChange={(e) => setType(e.value)}\n          //     />\n          //   </section>\n          // <section className={`date`}>\n          //   <InputDateRange\n          //     dateRange={dateRange}\n          //     onChange={(range) => setDateRange(range)}\n          //   />\n          // </section>\n          // </div>\n        }\n        {batch.length > 0 && (\n          <div className=\"batchAction\">\n            <button onClick={() => console.log(\"batch delete\")}>Delete</button>\n          </div>\n        )}\n        <table className=\"table orders\">\n          <thead>\n            <tr>\n              {\n                //   <th className=\"checkContainer\">\n                //   <Checkbox\n                //     value={selectAll}\n                //     defaultValue={selectAll}\n                //     onChange={(e) => setSelectAll(e)}\n                //   />\n                // </th>\n              }\n              <th>Order</th>\n              <th className=\"date\">Purchase Date</th>\n              {\n                //   <th>Seller</th>\n                // <th>QTY</th>\n                // <th>Refundable</th>\n                // <th>Milestone</th>\n              }\n              <th>Total</th>\n              <th>Status</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {orders.map((order) => (\n              <SingleOrder\n                onClick={onClick}\n                key={order._id}\n                order={order}\n                setOrders={setOrders}\n                selectAll={selectAll}\n                setBatch={setBatch}\n                batch={batch}\n              />\n            ))}\n            {status?.includes(\"pending\") &&\n              carts.map((order) => (\n                <OrderDraft order={order} key={order.seller._id} />\n              ))}\n            {orders.length === 0 && (\n              <tr className=\"placeholder\">\n                <td>No order yet.</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n        <Pagination\n          total={total}\n          btns={5}\n          currentPage={page}\n          perPage={perPage}\n          setPage={setPage}\n        />\n        <Modal className=\"msg\" open={msg}>\n          {msg}\n        </Modal>\n      </div>\n    </>\n  );\n};\nconst OrderDraft = ({ order, setOrder }) => {\n  const actionsRef = useRef();\n  const checkRef = useRef();\n  const history = useHistory();\n  const total = +(\n    order.products.reduce(\n      (a, c) =>\n        (\n          a +\n          calculatePrice({ product: c.product, gst: order.seller.gst }) * c.qty\n        ).fix(),\n      0\n    ) + (order.seller.shopInfo?.shippingCost || 0)\n  ).fix();\n  return (\n    <tr\n      className=\"order\"\n      onClick={(e) => {\n        if (\n          e.nativeEvent.path.includes(actionsRef.current) ||\n          e.nativeEvent.path.includes(checkRef.current)\n        ) {\n        } else {\n          history.push(\"/account/cart\");\n        }\n      }}\n    >\n      <td>-</td>\n      <td className=\"date\">\n        <Moment format=\"DD MMM YYYY\">{new Date()}</Moment>\n      </td>\n      <td>₹{total}</td>\n      <td>Draft</td>\n      <td ref={actionsRef}>\n        <Actions icon={<Chev_down_svg />}>\n          <Link to=\"/account/cart\">View Detail</Link>\n        </Actions>\n      </td>\n    </tr>\n  );\n};\nconst SingleOrder = ({\n  order,\n  setOrders,\n  selectAll,\n  setBatch,\n  batch,\n  onClick,\n}) => {\n  const actionsRef = useRef();\n  const checkRef = useRef();\n  const history = useHistory();\n  const { user } = useContext(SiteContext);\n  const [selected, setSelected] = useState(selectAll || false);\n  const [edit, setEdit] = useState(false);\n  const [msg, setMsg] = useState(false);\n  const cancelOrder = () => {\n    fetch(\"/api/cancelOrder\", {\n      method: \"PATCH\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ _id: order._id }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.code === \"ok\") {\n          setOrders((prev) =>\n            prev.map((item) => {\n              if (item._id === order._id) {\n                return {\n                  ...item,\n                  status: data.order?.status,\n                };\n              } else {\n                return item;\n              }\n            })\n          );\n        } else {\n          setMsg(\n            <>\n              <button onClick={() => setMsg(null)}>Okay</button>\n              <div>\n                <Err_svg />\n                <h4>Could not cancel order. Please try again.</h4>\n              </div>\n            </>\n          );\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setMsg(\n          <>\n            <button onClick={() => setMsg(null)}>Okay</button>\n            <div>\n              <Err_svg />\n              <h4>Could not cancel order. Make sure you're online</h4>\n            </div>\n          </>\n        );\n      });\n  };\n  const requestCancellation = () => {\n    fetch(\"/api/requestCancellation\", {\n      method: \"PATCH\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ _id: order._id }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.code === \"ok\") {\n          setOrders((prev) =>\n            prev.map((item) => {\n              if (item._id === order._id) {\n                return {\n                  ...item,\n                  status: data.order?.status,\n                };\n              } else {\n                return item;\n              }\n            })\n          );\n        } else {\n          setMsg(\n            <>\n              <button onClick={() => setMsg(null)}>Okay</button>\n              <div>\n                <Err_svg />\n                <h4>Could not cancel order. Please try again.</h4>\n              </div>\n            </>\n          );\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setMsg(\n          <>\n            <button onClick={() => setMsg(null)}>Okay</button>\n            <div>\n              <Err_svg />\n              <h4>Could not cancel order. Make sure you're online</h4>\n            </div>\n          </>\n        );\n      });\n  };\n  useEffect(() => {\n    setSelected(selectAll);\n  }, [selectAll]);\n  useEffect(() => {\n    if (selected) {\n      setBatch((prev) => [...prev, order._id]);\n    } else {\n      setBatch((prev) => prev.filter((item) => item !== order._id));\n    }\n  }, [selected]);\n  return (\n    <>\n      <tr\n        className={`order ${selected ? \"selected\" : \"\"}`}\n        onClick={(e) => {\n          if (\n            e.nativeEvent.path.includes(actionsRef.current) ||\n            e.nativeEvent.path.includes(checkRef.current) ||\n            batch.length > 0\n          ) {\n          } else {\n            onClick?.(order._id);\n          }\n        }}\n      >\n        {\n          //   <td className=\"checkContainer\" ref={checkRef}>\n          //   <Checkbox\n          //     defaultValue={selected}\n          //     value={selected}\n          //     onChange={(e) => {\n          //       setSelected(e);\n          //     }}\n          //   />\n          // </td>\n        }\n        <td>{order._id}</td>\n        <td className=\"date\">\n          <Moment format=\"DD MMM YYYY\">{order.createdAt}</Moment>\n        </td>\n        {\n          //   <td>\n          //   <User user={order.seller} />\n          // </td>\n          // <td>{order.products.reduce((a, c) => a + c.qty, 0)}</td>\n          // <td>{order.refundable || \"N/A\"}</td>\n          // <td>{order.milestones.length || \"N/A\"}</td>\n        }\n        <td>₹{order.total}</td>\n        <td>{order.status}</td>\n        <td ref={actionsRef}>\n          {batch.length === 0 && (\n            <Actions icon={<Chev_down_svg />}>\n              <Link to={`${history.location.pathname}/${order._id}`}>\n                View Detail\n              </Link>\n              {order.status === \"pending\" && (\n                <Link\n                  to=\"#\"\n                  onClick={(e) => {\n                    Confirm({\n                      label: \"Order Cancellation\",\n                      question: \"You sure want to cancel this order?\",\n                      callback: cancelOrder,\n                    });\n                  }}\n                >\n                  Cancel order\n                </Link>\n              )}\n              {order.status === \"approved\" && (\n                <Link\n                  to=\"#\"\n                  onClick={(e) => {\n                    Confirm({\n                      label: \"Order Cancellation\",\n                      question:\n                        \"You sure want to request cancellation for this order?\",\n                      callback: requestCancellation,\n                    });\n                  }}\n                >\n                  Request Cancellation\n                </Link>\n              )}\n            </Actions>\n          )}\n        </td>\n      </tr>\n      <Modal className=\"msg\" open={msg}>\n        {msg}\n      </Modal>\n    </>\n  );\n};\nexport const FullOrder = ({ history, match }) => {\n  const { userType } = useContext(SiteContext);\n  const [msg, setMsg] = useState(null);\n  const [order, setOrder] = useState(null);\n  const [milestoneForm, setMilestoneForm] = useState(false);\n  const [refundTill, setRefundTill] = useState(false);\n  const [issueRefund, setIssueRefund] = useState(false);\n  const milestoneTimeout = useRef();\n  const updateOrder = async (newData) => {\n    return fetch(\"/api/updateOrder\", {\n      method: \"PATCH\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(newData),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.code === \"ok\") {\n          return data.order;\n        } else {\n          setMsg(\n            <>\n              <button onClick={() => setMsg(null)}>Okay</button>\n              <div>\n                <Err_svg />\n                <h4>Orders does not exist.</h4>\n              </div>\n            </>\n          );\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setMsg(\n          <>\n            <button onClick={() => setMsg(null)}>Okay</button>\n            <div>\n              <Err_svg />\n              <h4>Could not update order. Make sure you're online.</h4>\n            </div>\n          </>\n        );\n      });\n  };\n  useEffect(() => {\n    fetch(`/api/singleOrder?_id=${match.params._id}`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.code === \"ok\") {\n          setOrder(data.order);\n        } else {\n          setMsg(\n            <>\n              <button onClick={() => setMsg(null)}>Okay</button>\n              <div>\n                <Err_svg />\n                <h4>Orders does not exist.</h4>\n              </div>\n            </>\n          );\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setMsg(\n          <>\n            <button onClick={() => setMsg(null)}>Okay</button>\n            <div>\n              <Err_svg />\n              <h4>Could not get order. Make sure you're online.</h4>\n            </div>\n          </>\n        );\n      });\n  }, []);\n  useEffect(() => {\n    if (order?.status === \"delivered\" && order?.refundable) {\n      let days = 0;\n      switch (order.refundable) {\n        case \"Upto 24 Hours After Delivery\":\n          days = 1;\n          break;\n        case \"Upto 7 Days After Delivery\":\n          days = 7;\n          break;\n        case \"Upto 15 Days After Delivery\":\n          days = 15;\n          break;\n        default:\n          return;\n      }\n      const refundTill = new Date(\n        new Date().getTime() + 1000 * 60 * 60 * 24 * days\n      );\n      if (new Date() < refundTill) {\n        setRefundTill(refundTill);\n      } else {\n        setRefundTill(null);\n      }\n    } else {\n      setRefundTill(null);\n    }\n  }, [order]);\n  if (order) {\n    const productPrice = order.products.reduce(\n      (a, c) =>\n        (a + calculatePrice({ product: c.product, gst: true }) * c.qty).fix(),\n      0\n    );\n    const couponCodeDiscount =\n      (order.coupon?.type === \"percent\" &&\n        Math.min(\n          (productPrice / 100) * order.coupon.amount,\n          order.coupon.maxDiscount\n        )) ||\n      (order.coupon?.type === \"flat\" && order.coupon?.amount) ||\n      0;\n    const fee = (\n      ((productPrice - couponCodeDiscount + order.shippingCost) / 100) *\n      order.fee\n    ).fix();\n    return (\n      <>\n        <div className=\"actions\">\n          <Link\n            to={`${\n              history.location.pathname.replace(\"/\" + match.params._id, \"\")\n                ? history.location.pathname.replace(\"/\" + match.params._id, \"\")\n                : userType === \"seller\"\n                ? \"/account/orders\"\n                : \"/account/orders/current\"\n            }`}\n            className=\"back\"\n          >\n            <Arrow_left_svg />\n            Back\n          </Link>\n          {refundTill && (\n            <button onClick={() => setIssueRefund(true)}>Issue refund</button>\n          )}\n        </div>\n        <div className=\"singleOrder\">\n          <div className=\"summery\">\n            <h3>Order Summery</h3>\n            <ul>\n              <li>\n                <label>Seller</label>\n                <User user={order.seller} />\n              </li>\n              <li>\n                <label>Order ID</label>\n                {order._id}\n              </li>\n              <li>\n                <label>Status</label>\n                {order.status}\n              </li>\n              <li>\n                <label>Order placed</label>\n                <Moment format=\"DD MMM YYYY, hh:mma\">{order.createdAt}</Moment>\n              </li>\n              {order.status === \"delivered\" && (\n                <li>\n                  <label>Delivered at</label>\n                  <Moment format=\"DD MMM YYYY, hh:mm a\">\n                    {order.deliveredAt}\n                  </Moment>\n                </li>\n              )}\n              <li>\n                <label>Refundable</label>\n                {order.refundable || \"N/A\"}\n              </li>\n              {refundTill && (\n                <li>\n                  <label>Refund till</label>\n                  <Moment format=\"DD MMM YYYY, hh:mm a\">{refundTill}</Moment>\n                </li>\n              )}\n              <li></li>\n              <li className=\"devide\">\n                <label>Delivery Address</label>\n                <span />\n              </li>\n              <>\n                {Object.entries(order.deliveryDetail).map(([key, value], i) =>\n                  key === \"deliveryTime\" ? (\n                    <li key={i}>\n                      <label>Delivery date</label>\n                      {order.deliveryDetail.deliveryTime ? (\n                        <Moment format=\"DD MMM, YYYY hh:mma\">\n                          {order.deliveryDetail.deliveryTime}\n                        </Moment>\n                      ) : (\n                        \"N/A\"\n                      )}\n                    </li>\n                  ) : (\n                    <li key={i}>\n                      <label>{key}</label>\n                      {value}\n                    </li>\n                  )\n                )}\n              </>\n            </ul>\n          </div>\n          <div className=\"products\">\n            <h3>Products</h3>\n            <ul>\n              {order.products.map(({ product, qty }, i) => (\n                <li key={i}>\n                  <Img src={product.images[0] || \"/open_box.png\"} />\n                  <div className=\"detail\">\n                    <p>{product.name}</p>\n                    <p className=\"qty\">QTY: {qty}</p>\n                  </div>\n                  <div className=\"price\">\n                    <span>\n                      {calculatePrice({ product, gst: true })} x {qty}\n                    </span>\n                    ₹{calculatePrice({ product, gst: true }) * qty}\n                  </div>\n                </li>\n              ))}\n            </ul>\n            <div className=\"total\">\n              <div className=\"data\">\n                <label>Total</label>₹{productPrice}\n              </div>\n              {order.coupon && (\n                <>\n                  <div className=\"data\">\n                    <label>\n                      Coupon Code {order.coupon.code}\n                      <br />\n                      Discount{\" \"}\n                      {order.coupon.type === \"percent\" ? (\n                        <>\n                          {order.coupon.amount}% (Upto ₹\n                          {order.coupon.maxDiscount})\n                        </>\n                      ) : (\n                        <>flat</>\n                      )}\n                    </label>\n                    <span>₹{couponCodeDiscount}</span>\n                  </div>\n                </>\n              )}\n              <div className=\"data\">\n                <label>Shipping</label>₹{order.shippingCost || \"N/A\"}\n              </div>\n              <hr />\n              <div className=\"data\">\n                <label>Delivery Pay fee {order.fee}%</label>₹{fee}\n              </div>\n              <hr />\n              <div className=\"data\">\n                <label>Grand Total</label>₹{order.total}\n              </div>\n            </div>\n          </div>\n          <div className=\"milestones\">\n            <h3>\n              Milestones\n              {\n                //   (order.status === \"approved\" ||\n                //   order.status === \"shipped\" ||\n                //   order.status === \"delivered\") && (\n                //   <button onClick={() => setMilestoneForm(true)}>\n                //     Create Milestone\n                //   </button>\n                // )\n              }\n            </h3>\n            <p className=\"subtitle\">Click to view milestone detail.</p>\n            {\n              //   {order.status == \"pending\" ? (\n              //   <p>You can create milestones after seller accepts your order.</p>\n              // ) : (\n            }\n            <table cellSpacing={0} cellPadding={0}>\n              <thead>\n                <tr>\n                  <td>Date</td>\n                  <td>Descrption</td>\n                  <td>Amount</td>\n                  <td>Status</td>\n                </tr>\n              </thead>\n              <tbody>\n                {order.milestones.map((milestone) => (\n                  <tr\n                    key={milestone._id}\n                    onClick={() =>\n                      history.push(`/account/hold?q=${milestone._id}`)\n                    }\n                  >\n                    <td>\n                      <Moment format=\"DD MMM YYYY, hh:mma\">\n                        {milestone.createdAt}\n                      </Moment>\n                    </td>\n                    <td>{milestone.dscr}</td>\n                    <td>₹{milestone.amount}</td>\n                    <td>{milestone.status}</td>\n                  </tr>\n                ))}\n                {order.milestones.length === 0 && (\n                  <tr className=\"placeholdert\">\n                    <td>Nothing yet.</td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n            {\n              // )}\n            }\n          </div>\n          <div className=\"delivery\">\n            <h3>Proof of delivery</h3>\n            {order.files?.length > 0 ? (\n              <div className=\"thumbs\">\n                <Media links={order.files} />\n              </div>\n            ) : (\n              <>No files added.</>\n            )}\n          </div>\n          <section className=\"terms\">\n            <h3>Return Policy Terms</h3>\n            <ul>\n              {order.terms?.map((item, i) => (\n                <li key={i}>{item}</li>\n              ))}\n              {!order.terms?.length && (\n                <li>No terms has been set by the seller yet.</li>\n              )}\n            </ul>\n          </section>\n        </div>\n        <Modal\n          head={true}\n          label=\"Create Milestone\"\n          setOpen={setMilestoneForm}\n          className=\"milestoneRequest\"\n          open={milestoneForm}\n        >\n          <MilestoneForm\n            action=\"create\"\n            definedAmount={order.total}\n            client={order.seller}\n            order={order._id}\n            onSuccess={(milestone) => {\n              setMilestoneForm(false);\n              setMsg(\n                <>\n                  <button onClick={() => setMsg(null)}>Okay</button>\n                  <div>\n                    <Succ_svg />\n                    <h4 className=\"amount\">₹{milestone?.amount}</h4>\n                    <h4>Milestone has been created</h4>\n                  </div>\n                  <Link to=\"/account/hold\" onClick={() => setMsg(null)}>\n                    Check your Delivery pay Hold\n                  </Link>\n                </>\n              );\n              setOrder((prev) => ({\n                ...prev,\n                milestones: [...prev.milestones, milestone],\n              }));\n            }}\n          />\n        </Modal>\n        <Modal\n          open={issueRefund}\n          head={true}\n          label=\"Issue Refund\"\n          setOpen={setIssueRefund}\n          className=\"issueRefund\"\n        >\n          <RefundForm\n            order={order}\n            onSuccess={(refund) => {\n              setIssueRefund(false);\n              setOrder((prev) => ({ ...prev, status: \"refundPending\" }));\n              setMsg(\n                <>\n                  <button onClick={() => setMsg(null)}>Okay</button>\n                  <div>\n                    <Succ_svg />\n                    <h4>Refund has been issued.</h4>\n                  </div>\n                </>\n              );\n            }}\n          />\n        </Modal>\n        <Modal className=\"msg\" open={msg}>\n          {msg}\n        </Modal>\n      </>\n    );\n  }\n  return <>Loading</>;\n};\n\nconst RefundForm = ({ order, onSuccess }) => {\n  const [msg, setMsg] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [issue, setIssue] = useState(\"\");\n  const [dscr, setDscr] = useState(\"\");\n  const [files, setFiles] = useState([]);\n  const submit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    const fileLinks = files.length ? await UploadFiles({ files, setMsg }) : [];\n    fetch(\"/api/issueRefund\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ order: order._id, issue, dscr, files: fileLinks }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setLoading(false);\n        if (data.code === \"ok\") {\n          onSuccess?.(data.refund);\n        } else {\n          setMsg(\n            <>\n              <button onClick={() => setMsg(null)}>Okay</button>\n              <div>\n                <Err_svg />\n                <h4>Refund could not be issued. Try again.</h4>\n              </div>\n            </>\n          );\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n        setMsg(\n          <>\n            <button onClick={() => setMsg(null)}>Okay</button>\n            <div>\n              <Err_svg />\n              <h4>Refund could not be issued. Make sure you're online.</h4>\n            </div>\n          </>\n        );\n      });\n  };\n  return (\n    <>\n      <form onSubmit={submit}>\n        <section>\n          <label>Issue</label>\n          <input\n            type=\"text\"\n            required={true}\n            value={issue}\n            onChange={(e) => setIssue(e.target.value)}\n          />\n        </section>\n        <section>\n          <label>Descrption</label>\n          <TextareaAutosize\n            required={true}\n            value={dscr}\n            onChange={(e) => setDscr(e.target.value)}\n          />\n        </section>\n        <section className=\"images\">\n          <label>Upload relevant files</label>\n          <FileInput\n            accept=\"image/*, video/*, audio/*\"\n            multiple={true}\n            onChange={(files) => setFiles(files)}\n          />\n        </section>\n        <section className=\"btns\">\n          <button className=\"submit\">Submit</button>\n        </section>\n      </form>\n      {loading && (\n        <div className=\"spinnerContainer\">\n          <div className=\"spinner\" />\n        </div>\n      )}\n      <Modal className=\"msg\" open={msg}>\n        {msg}\n      </Modal>\n    </>\n  );\n};\n\nconst Refunds = ({ history, location }) => {\n  const { userType } = useContext(SiteContext);\n  const [total, setTotal] = useState(0);\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(20);\n  const [search, setSearch] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [sort, setSort] = useState({\n    column: \"createdAt\",\n    order: \"dsc\",\n  });\n  const [dateRange, setDateRange] = useState(null);\n  const [refunds, setRefunds] = useState([]);\n  const [selectAll, setSelectAll] = useState(false);\n  const [batch, setBatch] = useState([]);\n  const [msg, setMsg] = useState(null);\n  useEffect(() => {\n    const startDate = moment({\n      time: dateRange?.startDate,\n      format: \"YYYY-MM-DD\",\n    });\n    const endDate = moment({\n      time: new Date(dateRange?.endDate)?.setHours(24, 0, 0, 0),\n      format: \"YYYY-MM-DD\",\n    });\n    fetch(\n      `/api/getRefunds?${new URLSearchParams({\n        user: userType,\n        ...(search && { q: search }),\n        page,\n        perPage,\n        sort: sort.column,\n        order: sort.order,\n        ...(dateRange && {\n          dateFrom: startDate,\n          dateTo: endDate,\n        }),\n        ...(status && { status }),\n      })}`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.code === \"ok\") {\n          setRefunds(data.refunds);\n          setTotal(data.total);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setMsg(\n          <>\n            <button onClick={() => setMsg(null)}>Okay</button>\n            <div>\n              <Err_svg />\n              <h4>Could not get orders.</h4>\n            </div>\n          </>\n        );\n      });\n  }, [search, page, perPage, dateRange, status]);\n  useEffect(() => {\n    if (selectAll) {\n    } else {\n      setBatch([]);\n    }\n  }, [selectAll]);\n  useEffect(() => {\n    if (batch.length === 0) {\n      setSelectAll(false);\n    }\n  }, [batch]);\n  return (\n    <>\n      <div className=\"benner\">\n        <p>My Refunds</p>\n      </div>\n      <div className=\"filters\">\n        <section>\n          <label>Total:</label>\n          {total}\n        </section>\n        <section>\n          <label>Per Page:</label>\n          <Combobox\n            defaultValue={0}\n            options={[\n              { label: \"20\", value: 20 },\n              { label: \"30\", value: 30 },\n              { label: \"50\", value: 50 },\n            ]}\n            onChange={(e) => setPerPage(e.value)}\n          />\n        </section>\n        <section className=\"search\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"23\"\n            height=\"23\"\n            viewBox=\"0 0 23 23\"\n          >\n            <path\n              id=\"Icon_ionic-ios-search\"\n              data-name=\"Icon ionic-ios-search\"\n              d=\"M27.23,25.828l-6.4-6.455a9.116,9.116,0,1,0-1.384,1.4L25.8,27.188a.985.985,0,0,0,1.39.036A.99.99,0,0,0,27.23,25.828ZM13.67,20.852a7.2,7.2,0,1,1,5.091-2.108A7.155,7.155,0,0,1,13.67,20.852Z\"\n              transform=\"translate(-4.5 -4.493)\"\n              fill=\"#707070\"\n              opacity=\"0.74\"\n            />\n          </svg>\n          <input\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n            placeholder=\"Search for Seller\"\n          />\n          {search && (\n            <button onClick={() => setSearch(\"\")}>\n              <X_svg />\n            </button>\n          )}\n        </section>\n        <section className=\"category\">\n          <label>Status:</label>\n          <Combobox\n            defaultValue={0}\n            options={[\n              { label: \"All\", value: \"\" },\n              { label: \"Pending\", value: \"pending\" },\n              { label: \"Approved\", value: \"approved\" },\n              { label: \"Product Sent\", value: \"productSent\" },\n              { label: \"Product Recieved\", value: \"productRecieved\" },\n              { label: \"Resolved\", value: \"resolved\" },\n            ]}\n            onChange={(e) => setStatus(e.value)}\n          />\n        </section>\n        <section className={`date`}>\n          <InputDateRange\n            dateRange={dateRange}\n            onChange={(range) => setDateRange(range)}\n          />\n        </section>\n      </div>\n      {batch.length > 0 && (\n        <div className=\"batchAction\">\n          <button onClick={() => console.log(\"batch delete\")}>Delete</button>\n        </div>\n      )}\n      <table className=\"table refunds\">\n        <thead>\n          <tr>\n            {\n              //   <th className=\"checkContainer\">\n              //   <Checkbox\n              //     value={selectAll}\n              //     defaultValue={selectAll}\n              //     onChange={(e) => setSelectAll(e)}\n              //   />\n              // </th>\n            }\n            <th className=\"date\">Date</th>\n            <th>Seller</th>\n            <th>QTY</th>\n            <th>Status</th>\n            <th>Total Price</th>\n            {\n              // <th>Actions</th>\n            }\n          </tr>\n        </thead>\n        <tbody>\n          {refunds.map((refund) => (\n            <SingleRefund\n              key={refund._id}\n              refund={refund}\n              setRefunds={setRefunds}\n              selectAll={selectAll}\n              setBatch={setBatch}\n              batch={batch}\n            />\n          ))}\n          {refunds.length === 0 && (\n            <tr className=\"placeholder\">\n              <td>No product yet.</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n      <Pagination\n        total={total}\n        btns={5}\n        currentPage={page}\n        perPage={perPage}\n        setPage={setPage}\n      />\n      <Modal className=\"msg\" open={msg}>\n        {msg}\n      </Modal>\n    </>\n  );\n};\nconst SingleRefund = ({ refund, setRefunds, selectAll, setBatch, batch }) => {\n  const history = useHistory();\n  const { user } = useContext(SiteContext);\n  const [selected, setSelected] = useState(selectAll || false);\n  const [edit, setEdit] = useState(false);\n  const [msg, setMsg] = useState(false);\n  useEffect(() => {\n    setSelected(selectAll);\n  }, [selectAll]);\n  useEffect(() => {\n    if (selected) {\n      setBatch((prev) => [...prev, refund._id]);\n    } else {\n      setBatch((prev) => prev.filter((item) => item !== refund._id));\n    }\n  }, [selected]);\n  return (\n    <>\n      <tr\n        className={`refund ${selected ? \"selected\" : \"\"}`}\n        onClick={() =>\n          history.push(`/account/myShopping/refunds/${refund._id}`)\n        }\n      >\n        {\n          //   <td className=\"checkContainer\">\n          //   <Checkbox\n          //     defaultValue={selected}\n          //     value={selected}\n          //     onChange={(e) => {\n          //       setSelected(e);\n          //     }}\n          //   />\n          // </td>\n        }\n        <td className=\"date\">\n          <Moment format=\"DD MMM YYYY, hh:mm a\">{refund.createdAt}</Moment>\n        </td>\n        <td>\n          <User user={refund.seller} />\n        </td>\n        <td>{refund.order?.products.reduce((a, c) => a + c.qty, 0)}</td>\n        <td>{refund.status}</td>\n        <td>₹{refund.order.total}</td>\n        {\n          //   <td>\n          //   {batch.length === 0 && (\n          //     <Actions icon={<Chev_down_svg />}>\n          //       <Link to=\"#\" className=\"edit\" onClick={() => setEdit(true)}>\n          //         Edit\n          //       </Link>\n          //       <Link\n          //         to=\"#\"\n          //         className=\"delete\"\n          //         onClick={() =>\n          //           Confirm({\n          //             label: \"Removing Product\",\n          //             question: \"You sure want to delete this product?\",\n          //             callback: removeProduct,\n          //           })\n          //         }\n          //       >\n          //         Delete\n          //       </Link>\n          //     </Actions>\n          //   )}\n          // </td>\n        }\n      </tr>\n      <Modal className=\"msg\" open={msg}>\n        {msg}\n      </Modal>\n    </>\n  );\n};\nconst FullRefund = ({ history, match }) => {\n  const { userType } = useContext(SiteContext);\n  const [msg, setMsg] = useState(null);\n  const [refund, setRefund] = useState(null);\n  const [order, setOrder] = useState(null);\n  const [milestoneForm, setMilestoneForm] = useState(false);\n  const [refundTill, setRefundTill] = useState(false);\n  const milestoneTimeout = useRef();\n  const updateRefund = async (newData) => {\n    return fetch(\"/api/updateRefund\", {\n      method: \"PATCH\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ ...newData, _id: refund._id }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.code === \"ok\") {\n          return data.order;\n        } else {\n          setMsg(\n            <>\n              <button onClick={() => setMsg(null)}>Okay</button>\n              <div>\n                <Err_svg />\n                <h4>Refund request does not exist.</h4>\n              </div>\n            </>\n          );\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setMsg(\n          <>\n            <button onClick={() => setMsg(null)}>Okay</button>\n            <div>\n              <Err_svg />\n              <h4>Could not update refund. Make sure you're online.</h4>\n            </div>\n          </>\n        );\n      });\n  };\n  useEffect(() => {\n    fetch(`/api/singleRefund?_id=${match.params._id}`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.code === \"ok\") {\n          setOrder(data.refund.order);\n          setRefund(data.refund);\n        } else {\n          setMsg(\n            <>\n              <button onClick={() => setMsg(null)}>Okay</button>\n              <div>\n                <Err_svg />\n                <h4>Refund does not exist.</h4>\n              </div>\n            </>\n          );\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setMsg(\n          <>\n            <button onClick={() => setMsg(null)}>Okay</button>\n            <div>\n              <Err_svg />\n              <h4>Could not get Refund. Make sure you're online.</h4>\n            </div>\n          </>\n        );\n      });\n  }, []);\n  useEffect(() => {\n    if (order?.refundable) {\n      let days = 0;\n      switch (order.refundable) {\n        case \"Upto 24 Hours After Delivery\":\n          days = 1;\n          break;\n        case \"Upto 7 Days After Delivery\":\n          days = 7;\n          break;\n        case \"Upto 15 Days After Delivery\":\n          days = 15;\n          break;\n        default:\n          return;\n      }\n      const refundTill = new Date(\n        new Date().getTime() + 1000 * 60 * 60 * 24 * days\n      );\n      if (new Date() < refundTill) {\n        setRefundTill(refundTill);\n      } else {\n        setRefundTill(null);\n      }\n    } else {\n      setRefundTill(null);\n    }\n  }, [refund]);\n  if (refund) {\n    return (\n      <>\n        <div className=\"actions\">\n          <Link\n            to={`/account/${\n              userType === \"seller\" ? \"myShop\" : \"myShopping\"\n            }/refunds`}\n            className=\"back\"\n          >\n            <Arrow_left_svg />\n            Back\n          </Link>\n          {refund.status === \"approved\" && (\n            <button\n              onClick={() =>\n                Confirm({\n                  label: \"Product Shipped\",\n                  question: \"Did you sent the product to seller?\",\n                  callback: () => {\n                    updateRefund({ status: \"productSent\" }).then((refund) => {\n                      setRefund((prev) => ({ ...prev, status: \"productSent\" }));\n                    });\n                  },\n                })\n              }\n            >\n              Product Sent\n            </button>\n          )}\n          {refund.status === \"productRecieved\" && (\n            <button\n              onClick={() =>\n                Confirm({\n                  label: \"Refund Resolved\",\n                  question: \"You sure want to mark this refund resolved?\",\n                  callback: () => {\n                    updateRefund({ status: \"resolved\" }).then((refund) => {\n                      setRefund((prev) => ({ ...prev, status: \"resolved\" }));\n                    });\n                  },\n                })\n              }\n            >\n              Mark as Resolved\n            </button>\n          )}\n        </div>\n        <div className=\"singleOrder\">\n          <div className=\"summery\">\n            <h3>Summery</h3>\n            <ul>\n              <li className=\"devide\">\n                <label>Order</label>\n                <span />\n              </li>\n              <li>\n                <label>Seller</label>\n                <User user={order.seller} />\n              </li>\n              <li>\n                <label>Order ID</label>\n                {order._id}\n              </li>\n              <li>\n                <label>Status</label>\n                {order.status}\n              </li>\n              <li>\n                <label>Ordered at</label>\n                <Moment format=\"DD MMM YYYY, hh:mma\">{order.createdAt}</Moment>\n              </li>\n              <li>\n                <label>Delivered at</label>\n                <Moment format=\"DD MMM YYYY, hh:mm a\">\n                  {order.deliveredAt}\n                </Moment>\n              </li>\n              <li>\n                <label>Proof of delivery</label>\n                {order.files?.length > 0 ? (\n                  <div className=\"thumbs\">\n                    <Media links={order.files} />\n                  </div>\n                ) : (\n                  <>No files added.</>\n                )}\n              </li>\n              <li>\n                <label>Refundable</label>\n                {order.refundable || \"N/A\"}\n              </li>\n              {refundTill && (\n                <li>\n                  <label>Refund till</label>\n                  <Moment format=\"DD MMM YYYY, hh:mm a\">{refundTill}</Moment>\n                </li>\n              )}\n              <li></li>\n              <li className=\"devide\">\n                <label>Refund</label>\n                <span />\n              </li>\n              <li>\n                <label>Refund ID</label>\n                {refund._id}\n              </li>\n              <li>\n                <label>Status</label>\n                {refund.status}\n              </li>\n              <li>\n                <label>Submitted at</label>\n                <Moment format=\"DD MMM YYYY, hh:mma\">{refund.createdAt}</Moment>\n              </li>\n              <li>\n                <label>Issue</label>\n                {refund.issue}\n              </li>\n              <li>\n                <label>Descrption</label>\n                {refund.dscr}\n              </li>\n              <li>\n                <label>Images</label>\n                <div className=\"thumbs\">\n                  {refund.files.length ? (\n                    <Media links={refund.files} />\n                  ) : (\n                    <>No Images has been provided.</>\n                  )}\n                </div>\n              </li>\n              <li></li>\n              <li className=\"devide\">\n                <label>Delivery Address</label>\n                <span />\n              </li>\n              <>\n                {Object.entries(order.deliveryDetail).map(([key, value], i) =>\n                  key === \"deliveryTime\" ? (\n                    <li key={i}>\n                      <label>Delivery date</label>\n                      {order.deliveryDetail.deliveryTime ? (\n                        <Moment format=\"DD MMM, YYYY hh:mma\">\n                          {order.deliveryDetail.deliveryTime}\n                        </Moment>\n                      ) : (\n                        \"N/A\"\n                      )}\n                    </li>\n                  ) : (\n                    <li key={i}>\n                      <label>{key}</label>\n                      {value}\n                    </li>\n                  )\n                )}\n              </>\n            </ul>\n          </div>\n          <div className=\"products\">\n            <h3>Products</h3>\n            <ul>\n              {order.products.map(({ product, qty }, i) => (\n                <li key={i}>\n                  <Img src={product.images[0] || \"/open_box.png\"} />\n                  <div className=\"detail\">\n                    <p>{product.name}</p>\n                    <p className=\"qty\">QTY: {qty}</p>\n                  </div>\n                  <div className=\"price\">\n                    <span>\n                      {calculatePrice({ product, gst: true })} x {qty}\n                    </span>\n                    ₹{calculatePrice({ product, gst: true }) * qty}\n                  </div>\n                </li>\n              ))}\n            </ul>\n            <div className=\"total\">\n              <div className=\"data\">\n                <label>Total</label>₹{order.total - order.shippingCost}\n              </div>\n              {\n                //   <div className=\"data\">\n                //   <label>Shipping</label>\n                //   {order.shippingCost || \"N/A\"}\n                // </div>\n                // <div className=\"data\">\n                // <label>Grand Total</label>₹\n                // {order.products.reduce(\n                //   (a, c) =>\n                //   a +\n                //   calculatePrice({ product: c.product, gst: true }) * c.qty,\n                //   0\n                // ) + (+order.shippingCost || 0)}\n                // </div>\n              }\n            </div>\n          </div>\n          <div className=\"milestones\">\n            <h3>\n              Milestones\n              {(refund.status === \"approved\" ||\n                refund.status === \"shipped\" ||\n                refund.status === \"delivered\") && (\n                <button onClick={() => setMilestoneForm(true)}>\n                  Request Milestone\n                </button>\n              )}\n            </h3>\n            {refund.status == \"pending\" ? (\n              <p>You can create milestones after seller accepts your order.</p>\n            ) : (\n              <table cellSpacing={0} cellPadding={0}>\n                <thead>\n                  <tr>\n                    <td>Date</td>\n                    <td>Descrption</td>\n                    <td>Amount</td>\n                    <td>Status</td>\n                  </tr>\n                </thead>\n                <tbody>\n                  {refund.milestones.map((milestone) => (\n                    <tr\n                      key={milestone._id}\n                      onClick={() =>\n                        history.push(`/account/hold?q=${milestone._id}`)\n                      }\n                    >\n                      <td>\n                        <Moment format=\"DD MMM YYYY, hh:mma\">\n                          {milestone.createdAt}\n                        </Moment>\n                      </td>\n                      <td>{milestone.dscr}</td>\n                      <td>₹{milestone.amount}</td>\n                      <td>{milestone.status}</td>\n                    </tr>\n                  ))}\n                  {refund.milestones.length === 0 && (\n                    <tr className=\"placeholdert\">\n                      <td>Nothing yet.</td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            )}\n          </div>\n          <section className=\"terms\">\n            <h3>Return Policy Terms</h3>\n            <ul>\n              {order.terms?.map((item, i) => (\n                <li key={i}>{item}</li>\n              ))}\n              {!order.terms?.length && (\n                <li>No terms has been set by the seller yet.</li>\n              )}\n            </ul>\n          </section>\n        </div>\n        <Modal\n          head={true}\n          label=\"Request Milestone\"\n          setOpen={setMilestoneForm}\n          className=\"milestoneRequest\"\n          open={milestoneForm}\n        >\n          <MilestoneForm\n            action=\"request\"\n            definedAmount={order.total - order.shippingCost}\n            client={order.seller}\n            refund={refund._id}\n            onSuccess={(milestone) => {\n              setMilestoneForm(false);\n              setMsg(\n                <>\n                  <button onClick={() => setMsg(null)}>Okay</button>\n                  <div>\n                    <Succ_svg />\n                    <h4 className=\"amount\">₹{milestone?.amount}</h4>\n                    <h4>Milestone has been requested</h4>\n                  </div>\n                  <Link to=\"/account/hold\" onClick={() => setMsg(null)}>\n                    Check your Delivery pay Hold\n                  </Link>\n                </>\n              );\n              setRefund((prev) => ({\n                ...prev,\n                milestones: [...prev.milestones, milestone],\n              }));\n            }}\n          />\n        </Modal>\n        <Modal className=\"msg\" open={msg}>\n          {msg}\n        </Modal>\n      </>\n    );\n  }\n  return <>Loading</>;\n};\n\nexport const Disputes = ({ status }) => {\n  const [total, setTotal] = useState(0);\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(20);\n  const [search, setSearch] = useState(\"\");\n  const [sort, setSort] = useState({\n    column: \"createdAt\",\n    order: \"dsc\",\n  });\n  const [disputes, setDisputes] = useState([]);\n  const [selectAll, setSelectAll] = useState(false);\n  const [batch, setBatch] = useState([]);\n  const [msg, setMsg] = useState(null);\n  useEffect(() => {\n    fetch(\n      `/api/getDisputes?${new URLSearchParams({\n        ...(search && { q: search }),\n        page,\n        perPage,\n        sort: sort.column,\n        order: sort.order,\n        ...(status && { status }),\n      })}`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.code === \"ok\") {\n          setDisputes(data.disputes);\n          setTotal(data.total);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setMsg(\n          <>\n            <button onClick={() => setMsg(null)}>Okay</button>\n            <div>\n              <Err_svg />\n              <h4>Could not get orders.</h4>\n            </div>\n          </>\n        );\n      });\n  }, [search, page, perPage, status]);\n  useEffect(() => {\n    if (selectAll) {\n    } else {\n      setBatch([]);\n    }\n  }, [selectAll]);\n  useEffect(() => {\n    if (batch.length === 0) {\n      setSelectAll(false);\n    }\n  }, [batch]);\n  return (\n    <div className=\"productContainer\">\n      {\n        <div className=\"benner\">\n          <p>My Disputes</p>\n        </div>\n      }\n      {\n        //   <div className=\"filters\">\n        //   <section>\n        //     <label>Total:</label>\n        //     {total}\n        //   </section>\n        //   <section>\n        //     <label>Per Page:</label>\n        //     <Combobox\n        //       defaultValue={0}\n        //       options={[\n        //         { label: \"20\", value: 20 },\n        //         { label: \"30\", value: 30 },\n        //         { label: \"50\", value: 50 },\n        //       ]}\n        //       onChange={(e) => setPerPage(e.value)}\n        //     />\n        //   </section>\n        //   <section className=\"search\">\n        //     <svg\n        //       xmlns=\"http://www.w3.org/2000/svg\"\n        //       width=\"23\"\n        //       height=\"23\"\n        //       viewBox=\"0 0 23 23\"\n        //     >\n        //       <path\n        //         id=\"Icon_ionic-ios-search\"\n        //         data-name=\"Icon ionic-ios-search\"\n        //         d=\"M27.23,25.828l-6.4-6.455a9.116,9.116,0,1,0-1.384,1.4L25.8,27.188a.985.985,0,0,0,1.39.036A.99.99,0,0,0,27.23,25.828ZM13.67,20.852a7.2,7.2,0,1,1,5.091-2.108A7.155,7.155,0,0,1,13.67,20.852Z\"\n        //         transform=\"translate(-4.5 -4.493)\"\n        //         fill=\"#707070\"\n        //         opacity=\"0.74\"\n        //       />\n        //     </svg>\n        //     <input\n        //       value={search}\n        //       onChange={(e) => setSearch(e.target.value)}\n        //       placeholder=\"Search for Seller\"\n        //     />\n        //     {search && (\n        //       <button onClick={() => setSearch(\"\")}>\n        //         <X_svg />\n        //       </button>\n        //     )}\n        //   </section>\n        //   <section className=\"category\">\n        //     <label>Type:</label>\n        //     <Combobox\n        //       defaultValue={0}\n        //       options={[\n        //         { label: \"All\", value: \"\" },\n        //         { label: \"Product\", value: \"product\" },\n        //         { label: \"Service\", value: \"service\" },\n        //         { label: \"Other\", value: \"other\" },\n        //       ]}\n        //       onChange={(e) => setType(e.value)}\n        //     />\n        //   </section>\n        //   <section\n        //     className={`date ${dateFilter ? \"open\" : \"\"}`}\n        //     ref={dateFilterRef}\n        //     onClick={() => setDateOpen(true)}\n        //   >\n        //     <svg\n        //       xmlns=\"http://www.w3.org/2000/svg\"\n        //       width=\"30.971\"\n        //       height=\"30.971\"\n        //       viewBox=\"0 0 30.971 30.971\"\n        //     >\n        //       <path\n        //         id=\"Path_299\"\n        //         data-name=\"Path 299\"\n        //         d=\"M3.992,2.42H6.775V.968a.968.968,0,1,1,1.936,0V2.42H22.26V.968a.968.968,0,1,1,1.936,0V2.42h2.783a4,4,0,0,1,3.992,3.992V26.978a4,4,0,0,1-3.992,3.992H3.992A4,4,0,0,1,0,26.978V6.412A4,4,0,0,1,3.992,2.42ZM26.978,4.355H24.2v.968a.968.968,0,1,1-1.936,0V4.355H8.71v.968a.968.968,0,1,1-1.936,0V4.355H3.992A2.059,2.059,0,0,0,1.936,6.412v2.3h27.1v-2.3A2.059,2.059,0,0,0,26.978,4.355ZM3.992,29.035H26.978a2.059,2.059,0,0,0,2.057-2.057V10.646H1.936V26.978A2.059,2.059,0,0,0,3.992,29.035Z\"\n        //         fill=\"#336cf9\"\n        //       />\n        //     </svg>\n        //     {dateFilter && (\n        //       <>\n        //         <div className=\"dates\">\n        //           <p>\n        //             From:{\" \"}\n        //             <Moment format=\"DD MMM, YYYY\">{dateRange.startDate}</Moment>\n        //           </p>\n        //           <p>\n        //             To: <Moment format=\"DD MMM, YYYY\">{dateRange.endDate}</Moment>\n        //           </p>\n        //         </div>\n        //         <button\n        //           className=\"clearDateFilter\"\n        //           onClick={() => {\n        //             setDateRange({\n        //               startDate: new Date(),\n        //               endDate: new Date(),\n        //             });\n        //             setDateFilter(false);\n        //           }}\n        //         >\n        //           <X_svg />\n        //         </button>\n        //       </>\n        //     )}\n        //   </section>\n        // </div>\n      }\n      {batch.length > 0 && (\n        <div className=\"batchAction\">\n          <button onClick={() => console.log(\"batch delete\")}>Delete</button>\n        </div>\n      )}\n      <table className=\"table disuptes\">\n        <thead>\n          <tr>\n            <th className=\"date\">Raised at</th>\n            <th>User</th>\n            <th>Issue</th>\n            <th>Status</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {disputes.map((dispute) => (\n            <SingleDispute\n              key={dispute._id}\n              dispute={dispute}\n              setDisputes={setDisputes}\n            />\n          ))}\n          {disputes.length === 0 && (\n            <tr className=\"placeholder\">\n              <td>No Dispute yet.</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n      <Pagination\n        total={total}\n        btns={5}\n        currentPage={page}\n        perPage={perPage}\n        setPage={setPage}\n      />\n      <Modal className=\"msg\" open={msg}>\n        {msg}\n      </Modal>\n    </div>\n  );\n};\nconst SingleDispute = ({ dispute, setDisputes }) => {\n  const actionsRef = useRef();\n  const checkRef = useRef();\n  const history = useHistory();\n  const { user } = useContext(SiteContext);\n  const [edit, setEdit] = useState(false);\n  const [msg, setMsg] = useState(false);\n  const client = dispute.plaintiff._id === user._id ? \"defendant\" : \"plaintiff\";\n  return (\n    <>\n      <tr\n        className={`dispute`}\n        onClick={(e) => {\n          if (\n            e.nativeEvent.path.includes(actionsRef.current) ||\n            e.nativeEvent.path.includes(checkRef.current)\n          ) {\n          } else {\n            history.push(`${history.location.pathname}/${dispute._id}`);\n          }\n        }}\n      >\n        <td className=\"date\">\n          <Moment format=\"DD MMM YYYY\">{dispute.createdAt}</Moment>\n        </td>\n        <td>\n          <User user={dispute[client]} />\n        </td>\n        <td>{dispute.issue}</td>\n        <td>{dispute.status}</td>\n        <td ref={actionsRef}>\n          <Actions icon={<Chev_down_svg />}>\n            <Link to={`${history.location.pathname}/${dispute._id}`}>\n              View Detail\n            </Link>\n          </Actions>\n        </td>\n      </tr>\n      <Modal className=\"msg\" open={msg}>\n        {msg}\n      </Modal>\n    </>\n  );\n};\nexport const FullDispute = ({ history, location, match }) => {\n  const [data, setData] = useState(null);\n  const [msg, setMsg] = useState(null);\n  useEffect(() => {\n    fetch(`/api/singleDispute?_id=${match.params._id}`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.code === \"ok\") {\n          setData(data.dispute);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setMsg(\n          <>\n            <button onClick={() => setMsg(null)}>Okay</button>\n            <div>\n              <Err_svg />\n              <h4>Could not get Dispute. Make sure you're online.</h4>\n            </div>\n          </>\n        );\n      });\n  }, []);\n  if (data) {\n    return (\n      <div className={`singleDispute ${data.status}`}>\n        <div className=\"disputeSummery\">\n          <div className=\"benner\">Dispute Summery</div>\n          <ul className=\"disputeDetail\">\n            <li>\n              <label>Dispute ID:</label>\n              <div className=\"data\">{data._id}</div>\n            </li>\n            <li>\n              <label>Status:</label>\n              <div className=\"data\">{data.status}</div>\n            </li>\n            <li>\n              <label>Issue:</label>\n              <div className=\"data\">{data.issue}</div>\n            </li>\n            <li>\n              <label>Issued by:</label>\n              <div className=\"data\">{data.plaintiff.role}</div>\n            </li>\n            <li>\n              <label>Dispute filed:</label>\n              <div className=\"data\">\n                <Moment format=\"hh:mm a, DD MMM, YYYY\">{data.createdAt}</Moment>\n              </div>\n            </li>\n            <li>\n              <label>Milestone amount:</label>\n              <div className=\"data\">₹ {data.milestone.amount}</div>\n            </li>\n            <li>\n              <label>Milestone description:</label>\n              <div className=\"data\">{data.milestone.dscr}</div>\n            </li>\n            <li>\n              <label>Milestone products:</label>\n              <div className=\"data\">\n                {data.milestone.products?.map((item, i) => (\n                  <li key={i}>{item.name}</li>\n                ))}\n                {data.milestone.products?.length ? null : \"No product selected\"}\n              </div>\n            </li>\n            <li>\n              <label>Milestone created:</label>\n              <div className=\"data\">\n                <Moment format=\"hh:mm a, DD MMM, YYYY\">\n                  {data.milestone.createdAt}\n                </Moment>\n              </div>\n            </li>\n          </ul>\n        </div>\n        <Case role=\"plaintiff\" dispute={data} setData={setData} />\n        <Case role=\"defendant\" dispute={data} setData={setData} />\n        <Modal open={msg} className=\"msg\">\n          {msg}\n        </Modal>\n      </div>\n    );\n  }\n  return (\n    <div className=\"singleDispute loading\">\n      <div className=\"disputeSummery\">\n        <div className=\"benner\">Dispute Summery</div>\n        <ul>\n          <li>\n            <div />\n            <div />\n          </li>\n          <li>\n            <div />\n            <div />\n          </li>\n          <li>\n            <div />\n            <div />\n          </li>\n        </ul>\n      </div>\n      <div className=\"plaintiff\">\n        <div className=\"benner\">Plaintiff</div>\n        <div className=\"user\">\n          <div className=\"img\" />\n          <div className=\"name\" />\n        </div>\n        <ul className=\"detail\">\n          <li>\n            <div />\n            <div />\n          </li>\n          <li>\n            <div />\n            <div />\n          </li>\n          <li>\n            <div />\n            <div />\n          </li>\n        </ul>\n      </div>\n      <div className=\"defendant\">\n        <div className=\"benner\">Defendant</div>\n        <div className=\"user\">\n          <div className=\"img\" />\n          <div className=\"name\" />\n        </div>\n        <ul className=\"detail\">\n          <li>\n            <div />\n            <div />\n          </li>\n          <li>\n            <div />\n            <div />\n          </li>\n          <li>\n            <div />\n            <div />\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nconst Case = ({ role, dispute, setData }) => {\n  const [msg, setMsg] = useState(null);\n  const resolveDispute = (winner) => {\n    fetch(\"/api/resolveDispute\", {\n      method: \"PATCH\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        _id: dispute._id,\n        winner,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.code === \"ok\") {\n          setMsg(\n            <>\n              <button onClick={() => setMsg(null)}>Okay</button>\n              <div>\n                <Succ_svg />\n                <h4>Dispute Successfully resolved.</h4>\n              </div>\n            </>\n          );\n          setData((prev) => ({\n            ...prev,\n            winner: data.dispute.winner,\n            status: data.dispute.status,\n          }));\n        } else {\n          setMsg(\n            <>\n              <button onClick={() => setMsg(null)}>Okay</button>\n              <div>\n                <Err_svg />\n                <h4>{data.message}</h4>\n              </div>\n            </>\n          );\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setMsg(\n          <>\n            <button onClick={() => setMsg(null)}>Okay</button>\n            <div>\n              <Err_svg />\n              <h4>\n                Dispute Could not be resolved. Make sure you' a're online.\n              </h4>\n            </div>\n          </>\n        );\n      });\n  };\n  return (\n    <div\n      className={`${role} ${dispute[role].role} ${\n        dispute.winner === dispute[role]._id ? \"winner\" : \"\"\n      }`}\n    >\n      <div className=\"benner\">\n        {role}\n        {dispute.status === \"pendingVerdict\" && dispute.defendant.case?.dscr && (\n          <button\n            onClick={() =>\n              Confirm({\n                className: \"disputeResolveConfirm\",\n                label: \"Dispute resolve\",\n                question: (\n                  <>\n                    Are you sure{\" \"}\n                    <span className=\"name\">\n                      {dispute[role].firstName + \" \" + dispute[role].lastName}\n                    </span>{\" \"}\n                    <span className=\"role\">({role})</span> is the winner of this\n                    dispute?\n                  </>\n                ),\n                callback: () => resolveDispute(dispute[role]._id),\n              })\n            }\n          >\n            Winner\n          </button>\n        )}\n        {dispute.winner === dispute[role]._id && (\n          <p className=\"winnerTag\">Winner</p>\n        )}\n      </div>\n      <div className=\"content\">\n        <div className=\"user\">\n          <Img src={dispute[role].profileImg || \"/profile-user.jpg\"} />\n          <p className=\"name\">\n            {dispute[role].firstName + \" \" + dispute[role].lastName}\n            <span className=\"phone\">{dispute[role].phone}</span>\n          </p>\n        </div>\n        {dispute[role].case?.dscr ? (\n          <ul className=\"detail\">\n            <li>\n              <label>Role:</label> <div>{dispute[role].role}</div>\n            </li>\n            <li>\n              <label>Current Balance:</label>{\" \"}\n              <div>₹ {dispute[role].balance?.fix()}</div>\n            </li>\n            <li>\n              <label>Case:</label>{\" \"}\n              <div>{dispute[role].case?.dscr || \"N/A\"}</div>\n            </li>\n            <li>\n              <label>Evidence:</label>{\" \"}\n              <div className=\"thumbs\">\n                {dispute[role].case?.files?.length ? (\n                  <Media links={dispute[role].case?.files} />\n                ) : (\n                  \"N/A\"\n                )}\n              </div>\n            </li>\n          </ul>\n        ) : (\n          <p className=\"noRes\">Has not responded yet.</p>\n        )}\n      </div>\n      <Modal open={msg} className=\"msg\">\n        {msg}\n      </Modal>\n    </div>\n  );\n};\n\nconst MyShopping = () => {\n  const history = useHistory();\n  const { userType } = useContext(SiteContext);\n  const [msg, setMsg] = useState(null);\n  const [categories, setCategories] = useState([]);\n  useEffect(() => {\n    fetch(\"/api/categories\")\n      .then((res) => res.json())\n      .then((data) => {\n        setCategories(data.categories);\n      });\n  }, []);\n  return (\n    <>\n      {userType === \"seller\" && <Redirect to=\"/account/myShop/orders\" />}\n      <div className=\"productContainer\">\n        <div style={{ display: \"none\" }}>\n          <X_svg />\n        </div>\n        {\n          //   <Tabs\n          //   basepath=\"/account/myShopping/\"\n          //   tabs={[\n          //     { label: \"Orders\", path: \"orders\" },\n          //     { label: \"Refunds\", path: \"refunds\" },\n          //   ]}\n          // />\n        }\n        <Switch>\n          <Route path=\"/account/orders/current/:_id\" component={FullOrder} />\n          <Route path=\"/account/orders/current\">\n            <Orders\n              status=\"approved|shipped|refundPending\"\n              onClick={(_id) => history.push(`/account/orders/current/${_id}`)}\n            />\n          </Route>\n          <Route path=\"/account/orders/pending/:_id\" component={FullOrder} />\n          <Route path=\"/account/orders/pending\">\n            <Orders\n              status=\"pending\"\n              onClick={(_id) => history.push(`/account/orders/pending/${_id}`)}\n            />\n          </Route>\n          <Route path=\"/account/orders/history/:_id\" component={FullOrder} />\n          <Route path=\"/account/orders/history\">\n            <Orders\n              status=\"delivered|cancelled|declined|refunded\"\n              onClick={(_id) => history.push(`/account/orders/history/${_id}`)}\n            />\n          </Route>\n          <Route path=\"/account/orders/dispute/:_id\" component={FullDispute} />\n          <Route path=\"/account/orders/dispute\" component={Disputes} />\n        </Switch>\n        {\n          // <Route path=\"/account/myShop/settings\">\n          //   <Settings categories={categories} setCategories={setCategories} />\n          // </Route>\n        }\n        <Modal className=\"msg\" open={msg}>\n          {msg}\n        </Modal>\n      </div>\n    </>\n  );\n};\nexport default MyShopping;\n"],"sourceRoot":""}